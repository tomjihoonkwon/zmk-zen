/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    //  Add tri-layer behavior here

    behaviors {
        tri_layer: sl_layer {
            compatible = "urob,zmk-behavior-simple-layer";
            label = "TRI_LAYER";
            layers = <1 2>;        // These are LWR and RSE layers
            target-layer = <3>;    // Layer 3 will activate when both are held
        };
    };

    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20>;
        };

        Escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        mod3 {
            bindings = <&mo 0>;
            key-positions = <38 39>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <24 11>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB         &kp Q  &kp W        &kp E         &kp R                       &kp T          &kp Y        &kp U                         &kp I      &kp O    &kp P     &kp BSPC
&kp CAPSLOCK    &kp A  &kp S        &kp D         &mt LG(F) F                 &kp G          &kp H        &kp J                         &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z  &mt K_CUT X  &mt K_COPY C  &mt K_PASTE V               &kp B          &kp N        &kp M                         &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                    &kp LEFT_ALT  &mt LEFT_COMMAND LG(SPACE)  &lt 1 SPACE    &lt 1 SPACE  &mt RIGHT_COMMAND LANGUAGE_1  &mo 2
            >;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&mt F1 TAB  &mt F2 NUMBER_1  &mt F3 NUMBER_2  &mt F4 NUMBER_3  &mt F5 NUMBER_4  &mt F6 N5    &mt F7 NUMBER_6  &mt F8 N7                 &mt F9 N8             &mt F10 N9        &mt F11 N0         &mt F12 BACKSPACE
&trans      &kp SLASH        &kp ASTERISK     &kp MINUS        &kp PLUS         &mkp LCLK    &mkp MB4         &none                     &kp UP_ARROW          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&trans      &none            &none            &none            &none            &mkp RCLK    &mkp MB5         &kp LEFT                  &kp DOWN              &kp RIGHT         &kp EQUAL          &trans
                                              &kp LG(LS(N5))   &trans           &trans       &trans           &kp LG(LS(LC(NUMBER_4)))  &kp LG(LS(NUMBER_4))
            >;
        };

        num_pad {
            bindings = <
&trans  &kp K_LOCK  &mt C_RW C_PREV       &mt C_PP C_PP         &mt C_FAST_FORWARD C_NEXT  &bt BT_SEL 0    &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp PLUS    &trans
&trans  &none       &kp K_MUTE            &kp C_VOL_DN          &kp C_VOLUME_UP            &bt BT_SEL 1    &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS   &none
&trans  &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_AL_CONTROL_PANEL     &bt BT_SEL 3    &kp EQUAL     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &none
                                          &trans                &trans                     &trans          &trans        &trans        &kp N0
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
